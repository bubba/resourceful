@Proceedings{damas1982,
author = {Damas, Luis and Milner, Robin}, 
editor = {}, 
title = {Principal Type-Schemes for Functional Programs.}, 
booktitle = {Principal Type-Schemes for Functional Programs.}, 
volume = {POPL 82}, 
publisher = {}, 
address = {}, 
pages = {207-212}, 
year = {1982}, 
abstract = {Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of its publication and date appear, and notice is given that copying is by permission …}, 
keywords = {}}

@Article{damas1984,
author = {Damas, Luis}, 
title = {Type assignment in programming languages}, 
journal = {}, 
volume = {}, 
number = {}, 
pages = {}, 
year = {1984}, 
abstract = {The purpose of this work is to present and study a family of polymorphic type disciplines for programming languages similar to the type discipline of ML, the metalanguage of the LCF system, which are based on the use of type inference systems to define the notion of well …}, 
location = {}, 
keywords = {}}


@Proceedings{birkedal2005,
author = {Birkedal, Lars and Torp-Smith, Noah and Yang, Hongseok}, 
editor = {}, 
title = {Semantics of separation-logic typing and higher-order frame rules}, 
booktitle = {Semantics of separation-logic typing and higher-order frame rules}, 
volume = {20th Annual IEEE Symposium on Logic in Computer Science (LICS’05)}, 
publisher = {IEEE}, 
address = {}, 
pages = {260-269}, 
year = {2005}, 
abstract = {We show how to give a coherent semantics to programs that are well-specified in a version of separation logic for a language with higher types: idealized algol extended with heaps (but with immutable stack variables). In particular, we provide simple sound rules for deriving …}, 
keywords = {}}

@Proceedings{krishnaswami2006,
author = {Krishnaswami, Neelakantan}, 
editor = {}, 
title = {Separation logic for a higher-order typed language}, 
booktitle = {Separation logic for a higher-order typed language}, 
volume = {Workshop on Semantics, Program Analysis and Computing Environments for Memory Management, SPACE 6}, 
publisher = {}, 
address = {}, 
pages = {73-82}, 
year = {2006}, 
abstract = {Separation logic is an extension of Hoare logic which permits reasoning about low-level imperative programs that use shared mutable heap structure. In this work, we create an extension of separation logic that permits effective, modular reasoning about typed, higher-order functional programs that use aliased mutable heap data, including pointers to code.}, 
keywords = {}}

@Article{mokhov2018,
author = {Mokhov, Andrey and Mitchell, Neil and Peyton Jones, Simon}, 
title = {Build systems à la carte}, 
journal = {Proceedings of the ACM on Programming Languages}, 
volume = {2}, 
number = {ICFP}, 
pages = {79}, 
year = {2018}, 
abstract = {Build systems are awesome, terrifying--and unloved. They are used by every developer around the world, but are rarely the object of study. In this paper we offer a systematic, and executable, framework for developing and comparing build systems, viewing them as …}, 
location = {}, 
keywords = {}}


@Article{krishnaswami2007,
author = {Krishnaswami, N and Birkedal, Lars and Aldrich, Jonathan and Reynolds, John C}, 
title = {Idealized ML and its separation logic}, 
journal = {Unpublished manuscript, July}, 
volume = {}, 
number = {}, 
pages = {}, 
year = {2007}, 
abstract = {Separation logic is an extension of Hoare logic which permits reasoning about low-level imperative programs that use shared mutable heap structure. In this work, we present a version of separation logic that permits effective, modular reasoning about typed, higherorder functional programs that use aliased mutable heap data, including pointers to code. Furthermore, we show how to use predicates in higher-order separation logic to modularly and abstractly specify the sharing behavior of programs.}, 
location = {}, 
keywords = {}}


@Article{ohearn2019,
author = {O’Hearn, Peter}, 
title = {Separation logic}, 
journal = {Communications of the ACM}, 
volume = {62}, 
number = {2}, 
pages = {86--95}, 
year = {2019}, 
abstract = {}, 
location = {}, 
keywords = {}}


@Article{milner1978,
author = {Milner, Robin}, 
title = {A theory of type polymorphism in programming}, 
journal = {Journal of computer and system sciences}, 
volume = {17}, 
number = {3}, 
pages = {348--375}, 
year = {1978}, 
abstract = {The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type …}, 
location = {}, 
keywords = {}}


