@article{ohearn2019,
author = {O’Hearn, Peter}, 
title = {Separation logic}, 
journal = {Communications of the ACM}, 
volume = 62, 
number = 2, 
pages = {86–95}, 
year = 2019}


@inproceedings{dubois2000,
author = {Dubois, Catherine}, 
title = {Proving ML type soundness within Coq}, 
booktitle = {Proving ML type soundness within Coq}, 
volume = {International Conference on Theorem Proving in Higher Order Logics}, 
publisher = {Springer}, 
address = {}, 
pages = {126-144}, 
year = {2000}, 
abstract = {We verify within the Coq proof assistant that ML typing is sound with respect to the dynamic semantics. We prove this property in the framework of a big step semantics and also in the framework of a reduction semantics. For that purpose, we use a syntax-directed version of …}, 
keywords = {}}

@phdthesis{tofte1988,
author = {Tofte, Mads}, 
title = {Operational semantics and polymorphic type inference}, 
school = {The University of Edinburgh}, 
address = {}, 
pages = {}, 
year = {1988}, 
abstract = {Three languages with polymorphic type disciplines are discussed, namely the λ-calculus with Milner’s polymorphic type discipline; a language with imperative features (polymorphic references); and a skeletal module language with structures, signatures and functors. In each of the two first cases we show that the type inference system is consistent with an operational dynamic semantics. On the module level, polymorphic types correspond to signatures. There is a notion of principal signature. So-called signature checking is the …}, 
keywords = {}}


@article{vaughan2005,
author = {Vaughan, Jeff}, 
title = {A proof of correctness for the Hindley-Milner type inference algorithm}, 
journal = {}, 
volume = {}, 
number = {}, 
pages = {}, 
year = {2005}, 
abstract = {… We write typing judgments in the algorithmic system as: Γ; AX ⊣W e ↑ (S, τ, A) This means thatrunning the Hindley-Milner algorithm on expression e in context Γ with tape AX finds e : τ …WA-Let 3 Theorems 3.1 Soundness of the syntax directed declarative rules …}, 
location = {}, 
keywords = {}}


@article{cardelli1994,
author = {Cardelli, L. and Martini, S. and Mitchell, J.C. and Scedrov, A.}, 
title = {An Extension of System F with Subtyping}, 
journal = {Information and Computation}, 
volume = {109}, 
number = {1-2}, 
pages = {4–56}, 
year = {1994}, 
abstract = {}, 
location = {}, 
keywords = {}}


@article{pottier1998,
author = {Pottier, François}, 
title = {Type inference in the presence of subtyping: from theory to practice}, 
journal = {}, 
volume = {}, 
number = {}, 
pages = {}, 
year = {1998}, 
abstract = {From a purely theoretical point of view, type inference for a functional language with parametric polymorphism and subtyping poses little difficulty. Indeed, it suffices to generalize the inference algorithm used in the ML language, so as to deal with type inequalities, rather than equalities. However, the number of such inequalities is linear in the program size-whence, from a practical point of view, a serious efficiency and readability problem. To solve this problem, one must simplify the inferred constraints. So, after studying the logical …}, 
location = {}, 
keywords = {}}


@thesis{damas1984,
author = {Damas, Luis}, 
title = {Type assignment in programming languages}, 
journal = {}, 
volume = {}, 
number = {}, 
pages = {}, 
year = {1984}, 
abstract = {The purpose of this work is to present and study a family of polymorphic type disciplines for programming languages similar to the type discipline of ML, the metalanguage of the LCF system, which are based on the use of type inference systems to define the notion of well …}, 
location = {}, 
keywords = {}}


@inproceedings{birkedal2005,
author = {Birkedal, Lars and Torp-Smith, Noah and Yang, Hongseok}, 
title = {Semantics of separation-logic typing and higher-order frame rules}, 
booktitle = {Semantics of separation-logic typing and higher-order frame rules}, 
volume = {20th Annual IEEE Symposium on Logic in Computer Science (LICS’05)}, 
publisher = {IEEE}, 
pages = {260-269}, 
year = 2005, 
abstract = {We show how to give a coherent semantics to programs that are well-specified in a version of separation logic for a language with higher types: idealized algol extended with heaps (but with immutable stack variables). In particular, we provide simple sound rules for deriving …}}

@inproceedings{krishnaswami2006,
author = {Krishnaswami, Neelakantan},
title = {Separation logic for a higher-order typed language}, 
booktitle = {Separation logic for a higher-order typed language}, 
pages = {73-82}, 
year = 2006,
abstract = {Separation logic is an extension of Hoare logic which permits reasoning about low-level imperative programs that use shared mutable heap structure. In this work, we create an extension of separation logic that permits effective, modular reasoning about typed, higher-order functional programs that use aliased mutable heap data, including pointers to code.},
note={Presented at Workshop on Semantics, Program Analysis and Computing Environments for Memory Management, SPACE 2006}}

@article{wright1994,
author = {Wright, Andrew K and Felleisen, Matthias}, 
title = {A syntactic approach to type soundness}, 
journal = {Information and computation}, 
volume = 115, 
number = 1, 
pages = {38–94}, 
year = 1994,
publisher = {Elsevier},
abstract = {We present a new approach to proving type soundness for Hindley/Milner-style polymorphic type systems. The keys to our approach are (1) an adaptation of subject reduction theorems from combinatory logic to programming languages, and (2) the use of rewriting techniques …}}


@inproceedings{damas1982,
author = {Damas, Luis and Milner, Robin}, 
title = {Principal Type-Schemes for Functional Programs.}, 
booktitle = {Principal Type-Schemes for Functional Programs.}, 
volume = {POPL 82}, 
pages = {207-212}, 
year = 1982,
organization = {ACM},
abstract = {Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of its publication and date appear, and notice is given that copying is by permission …}}

@article{milner1978,
author = {Milner, Robin}, 
title = {A theory of type polymorphism in programming}, 
journal = {Journal of computer and system sciences}, 
volume = 17, 
number = 3, 
pages = {348–375}, 
year = 1978, 
abstract = {The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type …}}

@inproceedings{peytonjones1993,
author = {Peyton Jones, Simon L and Wadler, Philip},
title = {Imperative functional programming},
booktitle = {Imperative functional programming},
volume = {Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on
                  Principles of programming languages},
organisation={ACM},
pages = {71-84},
year = 1993,
abstract = {We present a new model, based on monads, for performing
                  input/output in a non-strict, purely functional
                  language. It is composable, extensible, efficient,
                  requires no extensions to the type system, and
                  extends smoothly to incorporate mixed-language
                  working and in-place …}}

@inproceedings{wadler1995,
author = {Wadler, Philip}, 
title = {Monads for functional programming}, 
booktitle = {Monads for functional programming}, 
volume = {International School on Advanced Functional Programming}, 
publisher = {Springer}, 
pages = {24-52}, 
year = 1995, 
abstract = {The use of monads to structure functional programs is described. Monads provide a convenient framework for simulating effects found in other languages, such as global state, exception handling, output, or non-determinism. Three case studies are looked at in detail …}}

@incollection{norell2009,
author = {Norell, Ulf}, 
title = {Dependently Typed Programming in Agda}, 
booktitle = {Advanced Functional Programming: Lecture Notes in Computer Science}, 
publisher = {Springer Berlin Heidelberg}, 
address = {Berlin, Heidelberg}, 
pages = {230-266}, 
year = 2009}

@book{martin-lof1984,
author = {Martin-Löf, Per and Sambin, Giovanni}, 
title = {Intuitionistic type theory}, 
volume = 9, 
publisher = {Bibliopolis Naples}, 
year = 1984, 
abstract = {These lectures were given in Padova at the Laboratorio per Ricerche di Dinamica dei Sistemi e di Elettronica Biomedica of the Consiglio Nazionale delle Ricerche during the month of June 1980.%’I am indebted to Dr. Enrico Pagello of that laboratory for the op …}}

@article{kokke2020,
author = {Kokke, Wen and Siek, Jeremy G and Wadler, Philip}, 
title = {Programming language foundations in Agda}, 
journal = {Science of Computer Programming}, 
pages = 102440, 
year = 2020, 
abstract = {One of the leading textbooks for formal methods is Software Foundations (SF), written by Benjamin Pierce in collaboration with others, and based on Coq. After five years using SF in the classroom, we came to the conclusion that Coq is not the best vehicle for this purpose …}}

@inproceedings{chapman2019,
author = {Chapman, James and Kireev, Roman and Nester, Chad and Wadler, Philip}, 
title = {System F in Agda, for fun and profit},
booktitle = {System F in Agda, for fun and profit}, 
volume = {International Conference on Mathematics of Program Construction}, 
publisher = {Springer}, 
pages = {255-297}, 
year = 2019, 
abstract = {Abstract System F, also known as the polymorphic\(\lambda\)-calculus, is a typed\(\lambda\)-calculus independently discovered by the logician Jean-Yves Girard and the computer scientist John Reynolds. We consider\(F_ {\omega\mu}\), which adds higher-order kinds and …}}

@article{weirich2017,
author = {Weirich, Stephanie and Voizard, Antoine and de Amorim, Pedro Henrique Azevedo and Eisenberg, Richard A}, 
title = {A specification for dependent types in Haskell}, 
journal = {Proceedings of the ACM on Programming Languages}, 
volume = {1}, 
number = {ICFP}, 
pages = {31}, 
year = {2017}, 
abstract = {We propose a core semantics for Dependent Haskell, an extension of Haskell with full-spectrum dependent types. Our semantics consists of two related languages. The first is a Curry-style dependently-typed language with nontermination, irrelevant arguments, and …}, 
location = {}, 
keywords = {}}


@book{eisenberg2016,
author = {Eisenberg, Richard A}, 
title = {Dependent types in haskell: Theory and practice}, 
volume = {}, 
pages = {}, 
editor = {}, 
publisher = {University of Pennsylvania}, 
address = {}, 
year = {2016}, 
abstract = {I have formatted this proposal as an outline of my eventual dissertation, with drafts of parts of the final text already written. Paragraphs rendered in blue, such as this one, are meant to appear only in the proposal. Haskell has become a wonderful and rich playground for type …}, 
keywords = {}}

@inproceedings{reynolds2002,
author = {Reynolds, John C}, 
title = {Separation logic: A logic for shared mutable data structures}, 
booktitle = {Separation logic: A logic for shared mutable data structures}, 
volume = {Proceedings 17th Annual IEEE Symposium on Logic in Computer Science}, 
publisher = {IEEE}, 
pages = {55-74}, 
year = 2002, 
abstract = {In joint work with Peter O’Hearn and others, based on early ideas of Burstall, we have developed an extension of Hoare logic that permits reasoning about low-level imperative programs that use shared mutable data structure. The simple imperative programming …}}

@inproceedings{dolan2017,
  title={Polymorphism, subtyping, and type inference in MLsub},
  author={Dolan, Stephen and Mycroft, Alan},
  booktitle={Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
  pages={60--72},
  year={2017}
}

@article{ohearn2007,
author = {O’Hearn, Peter}, 
title = {Resources, concurrency, and local reasoning}, 
journal = {Theoretical computer science}, 
volume = 375, 
number = {1-3}, 
pages = {271–307}, 
year = 2007, 
abstract = {In this paper we show how a resource-oriented logic, separation logic, can be used to reason about the usage of resources in concurrent programs.}}

@book{barendregt1984,
author = {Barendregt, Hendrik P}, 
title = {The lambda calculus}, 
volume = 3, 
publisher = {North-Holland Amsterdam}, 
year = 1984}